git rm --cached (. или имя файла) чтобы удалить файлы которые вы добавилиь
командой git add 

git branch -- узнать какие ветки существуют
git branch (имя ветки) -- создание ветки
git branch -D (имя ветки)  удаление ветки
git branch -M (имя ветки) переименовать данную ветку
git checkout (имя ветки) переход на ветку
git checkout -b (имя ветки) создаёт новую ветку и переходит на неё

git remote add origin git@github.com:Yevgeniy-Ten/git-training.git
origin = имя репозитория,  можно указать другое название.
git remote = можно узнать какие репозитории удаленные есть у данного проекта
git@github ссылка на репозиторий

git merge (имя ветки) обьядиняет ветку на которой мы находимся с веткой
которой мы хотим обьединиться

git push (имя репозитория, можно написать здесь ссылку) (имя ветки) == указываем куда будем отправлять файлы

git pull (ссылка репозитория, или имя) (имя ветки) таким образом мы можем перетягивать обновления с репозитория с определенной ветки

git stash можно поместить файлы которые некоим образом не будут влиять на наш проект и не будут видны в проекте, но мы можем их взять в любой момент оттуда
и использовать

GIT_COMMITTER_DATE="2015-01-09 09:00:00.000000000 +0300" git commit --amend --date='2015-01-09 09:00:00.000000000 +0300' -C HEAD
Можно изменить дату последнего коммита где 2015-01 пишем вои даты и время

git rebase (имя ветки) топорно складывает две ветки, как merge, только
не будет конфликта, и ветка1 которую вы вкладываете ветку2, коммиты станут в порядке ветка2 сперва, потом ветка1

git log --pretty=значение === указываем в каком формате выводить, Пример:
git log --pretty=format:"%h  %as"-тут пишем в каком формате %h---id -%as--- вывести логи

HEAD обычно это последний коммит или последнее действие

git revert HEAD отмена последнего коммита

git clone --branch название ссылка
